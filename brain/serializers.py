from rest_framework import serializers
from .models import BrainNetwork, GraphSnapshot

class BrainNetworkSerializer(serializers.ModelSerializer):
    """
    Serializes the BrainNetwork model for API operations. Includes validation
    for key hyperparameters to prevent misconfiguration.
    """
    class Meta:
        model = BrainNetwork
        fields = '__all__'
        read_only_fields = ('created_at', 'updated_at')

    def validate_n_iter_before_neuron_added(self, value):
        if value <= 0:
            raise serializers.ValidationError("This value must be a positive integer.")
        return value

    def validate_sdr_sparsity(self, value):
        if value <= 0:
            raise serializers.ValidationError("Sparsity must be a positive integer.")
        # Ensure sparsity is not greater than dimensionality if both are provided
        dimensionality = self.initial_data.get('sdr_dimensionality')
        if dimensionality and value > int(dimensionality):
            raise serializers.ValidationError("Sparsity cannot be greater than dimensionality.")
        return value

class GraphSnapshotSerializer(serializers.ModelSerializer):
    """
    Serializes a list of GraphSnapshots. This view is optimized for performance
    by excluding the large 'graph_data' field, making it suitable for listing
    all available snapshots without transferring excessive data.
    """
    network = serializers.PrimaryKeyRelatedField(queryset=BrainNetwork.objects.all(),
                                                 help_text="The ID of the parent BrainNetwork.")
    name = serializers.CharField(max_length=255, help_text="A unique, descriptive name for the snapshot.")

    class Meta:
        model = GraphSnapshot
        fields = ['id', 'network', 'name', 'created_at']
        read_only_fields = ['id', 'created_at']

    def validate_name(self, value):
        if not value.strip():
            raise serializers.ValidationError("Snapshot name cannot be empty.")
        return value

class GraphSnapshotDetailSerializer(GraphSnapshotSerializer):
    """
    Serializes a single GraphSnapshot instance, including the full 'graph_data'.
    The 'graph_data' is read-only as it's generated by the service, not user-provided.
    """
    class Meta(GraphSnapshotSerializer.Meta):
        fields = '__all__'
        read_only_fields = GraphSnapshotSerializer.Meta.read_only_fields + ['graph_data']
